{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":17777,"databundleVersionId":869809,"sourceType":"competition"}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-06-18T21:55:45.241051Z","iopub.execute_input":"2025-06-18T21:55:45.241256Z","iopub.status.idle":"2025-06-18T21:55:47.816070Z","shell.execute_reply.started":"2025-06-18T21:55:45.241237Z","shell.execute_reply":"2025-06-18T21:55:47.814986Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/nlp-getting-started/sample_submission.csv\n/kaggle/input/nlp-getting-started/train.csv\n/kaggle/input/nlp-getting-started/test.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"markdown","source":"Before getting information on the training data, take a look at what the sample submission is expected to be. ","metadata":{}},{"cell_type":"code","source":"sample = pd.read_csv(\"/kaggle/input/nlp-getting-started/sample_submission.csv\")\nsample.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-18T21:55:47.818159Z","iopub.execute_input":"2025-06-18T21:55:47.818722Z","iopub.status.idle":"2025-06-18T21:55:47.871797Z","shell.execute_reply.started":"2025-06-18T21:55:47.818687Z","shell.execute_reply":"2025-06-18T21:55:47.870963Z"}},"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"   id  target\n0   0       0\n1   2       0\n2   3       0\n3   9       0\n4  11       0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>9</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>11</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":2},{"cell_type":"markdown","source":"Now, get basic information on the training data. Look at the train.csv file and get the first five rows of tweets.","metadata":{}},{"cell_type":"code","source":"# Get info on the training data\ntrain_data = pd.read_csv(\"/kaggle/input/nlp-getting-started/train.csv\")\ntrain_data.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-18T21:55:47.872623Z","iopub.execute_input":"2025-06-18T21:55:47.873424Z","iopub.status.idle":"2025-06-18T21:55:47.925255Z","shell.execute_reply.started":"2025-06-18T21:55:47.873383Z","shell.execute_reply":"2025-06-18T21:55:47.924242Z"}},"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"   id keyword location                                               text  \\\n0   1     NaN      NaN  Our Deeds are the Reason of this #earthquake M...   \n1   4     NaN      NaN             Forest fire near La Ronge Sask. Canada   \n2   5     NaN      NaN  All residents asked to 'shelter in place' are ...   \n3   6     NaN      NaN  13,000 people receive #wildfires evacuation or...   \n4   7     NaN      NaN  Just got sent this photo from Ruby #Alaska as ...   \n\n   target  \n0       1  \n1       1  \n2       1  \n3       1  \n4       1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>keyword</th>\n      <th>location</th>\n      <th>text</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Our Deeds are the Reason of this #earthquake M...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Forest fire near La Ronge Sask. Canada</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>All residents asked to 'shelter in place' are ...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>6</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>13,000 people receive #wildfires evacuation or...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>7</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Just got sent this photo from Ruby #Alaska as ...</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"train_data.columns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-18T21:55:47.926266Z","iopub.execute_input":"2025-06-18T21:55:47.926599Z","iopub.status.idle":"2025-06-18T21:55:47.935592Z","shell.execute_reply.started":"2025-06-18T21:55:47.926567Z","shell.execute_reply":"2025-06-18T21:55:47.934357Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"Index(['id', 'keyword', 'location', 'text', 'target'], dtype='object')"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"train_data.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-18T21:55:47.938362Z","iopub.execute_input":"2025-06-18T21:55:47.938721Z","iopub.status.idle":"2025-06-18T21:55:47.954596Z","shell.execute_reply.started":"2025-06-18T21:55:47.938686Z","shell.execute_reply":"2025-06-18T21:55:47.953512Z"}},"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"(7613, 5)"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"train_data.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-18T21:55:47.955614Z","iopub.execute_input":"2025-06-18T21:55:47.955938Z","iopub.status.idle":"2025-06-18T21:55:47.982488Z","shell.execute_reply.started":"2025-06-18T21:55:47.955908Z","shell.execute_reply":"2025-06-18T21:55:47.981271Z"}},"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"id             0\nkeyword       61\nlocation    2533\ntext           0\ntarget         0\ndtype: int64"},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"train_data.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-18T21:55:47.983400Z","iopub.execute_input":"2025-06-18T21:55:47.983711Z","iopub.status.idle":"2025-06-18T21:55:48.016947Z","shell.execute_reply.started":"2025-06-18T21:55:47.983686Z","shell.execute_reply":"2025-06-18T21:55:48.015147Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 7613 entries, 0 to 7612\nData columns (total 5 columns):\n #   Column    Non-Null Count  Dtype \n---  ------    --------------  ----- \n 0   id        7613 non-null   int64 \n 1   keyword   7552 non-null   object\n 2   location  5080 non-null   object\n 3   text      7613 non-null   object\n 4   target    7613 non-null   int64 \ndtypes: int64(2), object(3)\nmemory usage: 297.5+ KB\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"train_data.nunique()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-18T21:55:48.018024Z","iopub.execute_input":"2025-06-18T21:55:48.018325Z","iopub.status.idle":"2025-06-18T21:55:48.065605Z","shell.execute_reply.started":"2025-06-18T21:55:48.018290Z","shell.execute_reply":"2025-06-18T21:55:48.064867Z"}},"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"id          7613\nkeyword      221\nlocation    3341\ntext        7503\ntarget         2\ndtype: int64"},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"train_data.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-18T21:55:48.067214Z","iopub.execute_input":"2025-06-18T21:55:48.070694Z","iopub.status.idle":"2025-06-18T21:55:48.118302Z","shell.execute_reply.started":"2025-06-18T21:55:48.070655Z","shell.execute_reply":"2025-06-18T21:55:48.117351Z"}},"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"                 id      target\ncount   7613.000000  7613.00000\nmean    5441.934848     0.42966\nstd     3137.116090     0.49506\nmin        1.000000     0.00000\n25%     2734.000000     0.00000\n50%     5408.000000     0.00000\n75%     8146.000000     1.00000\nmax    10873.000000     1.00000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>7613.000000</td>\n      <td>7613.00000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5441.934848</td>\n      <td>0.42966</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>3137.116090</td>\n      <td>0.49506</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000000</td>\n      <td>0.00000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2734.000000</td>\n      <td>0.00000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>5408.000000</td>\n      <td>0.00000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>8146.000000</td>\n      <td>1.00000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>10873.000000</td>\n      <td>1.00000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":9},{"cell_type":"markdown","source":"Now, get information on the test data. ","metadata":{}},{"cell_type":"code","source":"# Get info on the test data\ntest_data = pd.read_csv(\"/kaggle/input/nlp-getting-started/test.csv\")\ntest_data.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-18T21:55:48.119469Z","iopub.execute_input":"2025-06-18T21:55:48.120363Z","iopub.status.idle":"2025-06-18T21:55:48.153628Z","shell.execute_reply.started":"2025-06-18T21:55:48.120329Z","shell.execute_reply":"2025-06-18T21:55:48.152583Z"}},"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"   id keyword location                                               text\n0   0     NaN      NaN                 Just happened a terrible car crash\n1   2     NaN      NaN  Heard about #earthquake is different cities, s...\n2   3     NaN      NaN  there is a forest fire at spot pond, geese are...\n3   9     NaN      NaN           Apocalypse lighting. #Spokane #wildfires\n4  11     NaN      NaN      Typhoon Soudelor kills 28 in China and Taiwan","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>keyword</th>\n      <th>location</th>\n      <th>text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Just happened a terrible car crash</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Heard about #earthquake is different cities, s...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>there is a forest fire at spot pond, geese are...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>9</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Apocalypse lighting. #Spokane #wildfires</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>11</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Typhoon Soudelor kills 28 in China and Taiwan</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":10},{"cell_type":"code","source":"test_data.columns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-18T21:55:48.154582Z","iopub.execute_input":"2025-06-18T21:55:48.154911Z","iopub.status.idle":"2025-06-18T21:55:48.161502Z","shell.execute_reply.started":"2025-06-18T21:55:48.154873Z","shell.execute_reply":"2025-06-18T21:55:48.160651Z"}},"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"Index(['id', 'keyword', 'location', 'text'], dtype='object')"},"metadata":{}}],"execution_count":11},{"cell_type":"code","source":"test_data.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-18T21:55:48.162202Z","iopub.execute_input":"2025-06-18T21:55:48.162500Z","iopub.status.idle":"2025-06-18T21:55:48.181624Z","shell.execute_reply.started":"2025-06-18T21:55:48.162474Z","shell.execute_reply":"2025-06-18T21:55:48.180532Z"}},"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"(3263, 4)"},"metadata":{}}],"execution_count":12},{"cell_type":"code","source":"test_data.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-18T21:55:48.182657Z","iopub.execute_input":"2025-06-18T21:55:48.182965Z","iopub.status.idle":"2025-06-18T21:55:48.208575Z","shell.execute_reply.started":"2025-06-18T21:55:48.182939Z","shell.execute_reply":"2025-06-18T21:55:48.207468Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 3263 entries, 0 to 3262\nData columns (total 4 columns):\n #   Column    Non-Null Count  Dtype \n---  ------    --------------  ----- \n 0   id        3263 non-null   int64 \n 1   keyword   3237 non-null   object\n 2   location  2158 non-null   object\n 3   text      3263 non-null   object\ndtypes: int64(1), object(3)\nmemory usage: 102.1+ KB\n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"test_data.nunique()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-18T21:55:48.211499Z","iopub.execute_input":"2025-06-18T21:55:48.212274Z","iopub.status.idle":"2025-06-18T21:55:48.233984Z","shell.execute_reply.started":"2025-06-18T21:55:48.212211Z","shell.execute_reply":"2025-06-18T21:55:48.233070Z"}},"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"id          3263\nkeyword      221\nlocation    1602\ntext        3243\ndtype: int64"},"metadata":{}}],"execution_count":14},{"cell_type":"code","source":"test_data.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-18T21:55:48.234958Z","iopub.execute_input":"2025-06-18T21:55:48.235330Z","iopub.status.idle":"2025-06-18T21:55:48.258141Z","shell.execute_reply.started":"2025-06-18T21:55:48.235305Z","shell.execute_reply":"2025-06-18T21:55:48.256912Z"}},"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"                 id\ncount   3263.000000\nmean    5427.152927\nstd     3146.427221\nmin        0.000000\n25%     2683.000000\n50%     5500.000000\n75%     8176.000000\nmax    10875.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>3263.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5427.152927</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>3146.427221</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2683.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>5500.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>8176.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>10875.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":15},{"cell_type":"code","source":"# Compare the train and test data info and shapes\nprint(train_data.info(), test_data.info())\nprint(train_data.shape, test_data.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-18T22:47:43.523640Z","iopub.execute_input":"2025-06-18T22:47:43.524409Z","iopub.status.idle":"2025-06-18T22:47:43.545824Z","shell.execute_reply.started":"2025-06-18T22:47:43.524376Z","shell.execute_reply":"2025-06-18T22:47:43.544517Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 7613 entries, 0 to 7612\nData columns (total 5 columns):\n #   Column    Non-Null Count  Dtype \n---  ------    --------------  ----- \n 0   id        7613 non-null   int64 \n 1   keyword   7552 non-null   object\n 2   location  5080 non-null   object\n 3   text      7613 non-null   object\n 4   target    7613 non-null   int64 \ndtypes: int64(2), object(3)\nmemory usage: 297.5+ KB\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 3263 entries, 0 to 3262\nData columns (total 4 columns):\n #   Column    Non-Null Count  Dtype \n---  ------    --------------  ----- \n 0   id        3263 non-null   int64 \n 1   keyword   3237 non-null   object\n 2   location  2158 non-null   object\n 3   text      3263 non-null   object\ndtypes: int64(1), object(3)\nmemory usage: 102.1+ KB\nNone None\n(7613, 5) (3263, 4)\n","output_type":"stream"}],"execution_count":16},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}